# Installing EOSFactory

The purpose of this tutorial is to demonstrate how to install EOSFactory on any operating system, including Windows, OSX and Linux.

## Prerequisites

* If you're on Windows 10, we assume that you have [*Windows Subsystem for Linux*](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux) installed. If that's not the case, please refer to [this guide](https://docs.microsoft.com/en-us/windows/wsl/install-win10).
* We also assume that you have successfully installed *EOSIO* on your machine. If that's not the case, please refer to [this guide](https://github.com/EOSIO/eos/wiki/Local-Environment).
* And finally we assume you have [Python3](https://www.python.org/download/releases/3.0/) installed (this refers to OSX and Linux only, as *Windows Subsystem for Linux* ships with Python3 by default).

**NOTE:** If you are on Windows 10, the only option you have regarding *EOSIO* installation is building it in the Ubuntu bash (supplied by *Windows Subsystem for Linux*), as it cannot be compiled directly on a Windows machine. What we recommend is clone the *EOSIO* source code in Windows, but build it in the Ubuntu bash, taking advantage of the fact that the entire Windows file structure is fully accessible in the Ubuntu bash.

## Get the source code

Clone EOSFactory source code from the repository:

```
git clone https://github.com/tokenika/eosfactory.git
```

## Build EOSFactory on Linux & OSX

Open a bash terminal and define an environment variable called `EOSIO_SOURCE_DIR`:

```
echo 'export EOSIO_SOURCE_DIR=/path/to/your/local/EOSIO/repository' >> ~/.bashrc
```

**NOTE:** Make sure to supply the correct path - it's meant to be the path to the *EOSIO* source code that you have cloned from the official [EOSIO repository](https://github.com/EOSIO/eos). In our case the path is `/~/Workspaces/EOS/eos` but yours will most probably be different:

```
echo 'export EOSIO_SOURCE_DIR=~/Workspaces/EOS/eos' >> ~/.bashrc
```

Apply the above change to your bash terminal:

```
source ~/.bashrc
```

Finally, navigate to the `eosfactory` folder and run the build script:

```
cd eosfactory
./build.sh
```

**NOTE:** When the build process is finished restart the bash terminal or at least reload `bashrc`:

```
source ~/.bashrc
```

## Build EOSFactory on Windows

Open an Ubuntu bash terminal supplied by *Windows Subsystem for Linux.*

In the bash terminal define an environment variable called `EOSIO_SOURCE_DIR`:

```
echo 'export EOSIO_SOURCE_DIR=/path/to/your/local/EOSIO/repository' >> ~/.bashrc
```

**NOTE:** Make sure to supply the correct path - it's meant to be the path to the *EOSIO* source code that you have cloned from the official [EOSIO repository](https://github.com/EOSIO/eos). In our case the path is `/mnt/d/Workspaces/EOS/eos` but yours will most probably be different:

```
echo 'export EOSIO_SOURCE_DIR=/mnt/d/Workspaces/EOS/eos' >> ~/.bashrc
```

Apply the above change to your bash terminal:

```
source ~/.bashrc
```

Next, still in the bash terminal run this command to define a Windows user variable pointing to your Ubuntu home directory, as seen from the Windows file system perspective:

```
setx.exe "HOME" "path\\to\\your\\ubuntu\\home\\directory"
```

**NOTE:** Make sure to supply the correct path - most probably it will be similar to the one listed below:

```
setx.exe "HOME" %LocalAppData%\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\home\\$USER
```

If you are unsure what the path is in your case, open *Windows Explorer* and navigate to the  `%LocalAppData%\Packages` folder and search for `rootfs`.

**NOTE:** Make sure the supplied path ends with your Ubuntu user name.

**NOTE:** Restart your bash terminal for the change to take effect.

Check if the variable `HOME` has been properly set by running this command in the bash terminal:

```
echo $(cmd.exe /c dir %HOME%)
```

You should get a response similar to this:

```
5 Dir(s) 13,115,555,840 bytes...
```

Finally, navigate to the `eosfactory` folder and run the build script:

```
cd eosfactory
./build.sh
```

**NOTE:** When the build process is finished you'll need to restart your bash terminal.

## Test EOSFactory

In the bash terminal, let's verify that EOSFactory works and is properly hooked up to *EOSIO*. You can do it by running a simple unit-test:

```
cd eosfactory
python3 ./tests/test1.py
```
