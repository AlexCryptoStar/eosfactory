# Compiling EOS Contracts using EOSFactory in *Visual Studio Code*

The purpose of this tutorial is to demonstrate how EOSFactory and its Python CLI combined with *Visual Studio Code* can be used to make compiling EOS contracts easy & intuitive. 

## Prerequisites

* This tutorial assumes that you have successfully installed EOSFactory. If it's not the case, please refer to [Installing EOSFactory](01.InstallingEOSFactory.html).
* We also assume that you are familiar with the material covered in [Interacting with EOS Contracts in EOSFactory](02.InteractingWithEOSContractsInEOSFactory.html).
* EOSFactory is fully compatible with [Visual Studio Code](https://code.visualstudio.com) which is a very convenient tool when working with smart-contract code. To install it, please refer to [this webpage](https://code.visualstudio.com/download).
* Finally, we assume that you are familiar with the official [EOS Hello World tutorial](https://github.com/EOSIO/eos/wiki/Tutorial-Hello-World-Contract), as it presents the default way to compile and deploy smart-contracts in EOS. What we present here is an alternative.

## Configure *Visual Studio Code* (VSC)

Start *Visual Studio Code* (VSC) and inside VSC open the `eosfactory` folder.

In you are on Windows, navigate to `Preferences -> Settings` and overwrite the default configuration for the `terminal.integrated.shell.windows` option:

```
"terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe"
```

## Run Python CLI in VSC

In *Visual Studio Code*, switch to the bash terminal and type `python3` to run the Python CLI. The prompt should change to `>>>` signifying that it's ready for Python commands.

## Create a Contract Template

First, start the testnet and initialize the workspace:

```
import node
node.reset()
```

```
import sess
sess.init()
```

To create a new contract from a pre-defined template use the `Template` class:

```
from eosf import *
contract = Template("hello")
```

**NOTE:**  For naming contracts use names that are compatible with EOS requirements regarding account names - this is because for each contract EOSFactory creates an account associated with it and this account is has the same name as the contract. So for example underscores are not allowed, use dots instead, and the names cannot be longer than 12 characters. This is a temporary limitation, it will be removed in the future.

To check the directory where the contract's files are located:

```
contract.path()
```

## Add C++ code

Edit the `hello.cpp` file in *Visual Studio Code* and add the following content to it:

```
#include <eosiolib/eosio.hpp>
#include <eosiolib/print.hpp>
using namespace eosio;

class hello : public eosio::contract {
  public:
      using contract::contract;

      /// @abi action 
      void hi( account_name user ) {
         print( "Hello, ", name{user} );
      }
};

EOSIO_ABI( hello, (hi) )
```

## Compile the Contract

You can generate ABI and the web assembly code separately:

```
contract.abi()
```

```
contract.wast()
```

Or you can generate both at the same time:

```
contract.build()
```

## Deploy the Contract

Now we can deploy the compiled contract:

```
contract.deploy()
```

## Test the Contract

We can play with the contract giving it different arguments:

```
contract.push_action("hi", '{"user":"alice"}', sess.alice)
```

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

All the above variations should work, as the contract allows anyone to authorize it.

## Modify the code, re-compile & re-deploy

And now let's modify the `hi` method to make it authenticate the user we are dealing with:

```
void hi( account_name user ) {
	require_auth( user );
	print( "Hello, ", name{user} );
}
```

Re-compile the contract:

```
contract.build()
```

The following step is optional, as you can re-deploy the contract on the same testnet. However, if you want to reset the testnet, use these commands:

```
node.reset()
sess.init()
```

And finally, re-deploy the contract:

```
contract.deploy()
```

Now, if we attempt to mismatch the user and the authority, the contract will throw an error:

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

```
"error":{"code":3030001,"name":"tx_missing_auth","what":"missing required authority"...
```

But if we use the appropriate authority, there should no error:

```
contract.push_action("hi", '{"user":"carol"}', sess.carol)
```

## Using *CMake* and *IntelliSense* in *Visual Studio Code*

If you open a specific contract folder (e.g. `tic.tac.toe` ) in *Visual Studio Code*, you'll be able to make use of VSC [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense) feature. Also, you'll be able to compile your contract using *CMake* by choosing the `Run Build Task` option from the VSC menu, or just `Crtl+Shift+B`.

Here is what the build process output looks like:

```
> Executing task: /mnt/d/Workspaces/EOS/eosfactory/teos/build/teos generate abi /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe;/mnt/d/Workspaces/EOS/eosfactory/teos/build/teos build contract /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe <

#              ABI: /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe/build/tic_tac_toe.abi
#             WAST: /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe/build/tic_tac_toe.wast

Terminal will be reused by tasks, press any key to close it.
```

