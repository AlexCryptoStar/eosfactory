# Building and Deploying EOS Contracts using EOSFactory

The purpose of this tutorial is to demonstrate how you can use EOSFactory to execute the simplest development cycle: create a new contract, edit the code, build the contract, deploy it and interact with it.

## Prerequisites

* This tutorial assumes that you have successfully installed EOSFactory. If it's not the case, please refer to [Installing EOSFactory](01.InstallingEOSFactory.html).
* We also assume that you are familiar with the material covered in [Interacting with EOS Contracts in EOSFactory](02.InteractingWithEOSContractsInEOSFactory.html).
* Finally, we assume that you are familiar with the official [EOS Hello World tutorial](https://github.com/EOSIO).

## Run Python CLI in VSC

Open a bash terminal and run Python CLI:

```
python3
```

The prompt should change to `>>>` signifying that it's ready for Python commands.

## Create a new contract from template

First, start the testnet and initialize the workspace:

```
import node
node.reset()
```

```
import sess
sess.init()
```

To create a new contract from a pre-defined template use the `ContractFromTemplate` class:

```
from eosf import *
contract = ContractFromTemplate("hello.world")
```

**NOTE:**  Do not use spaces in contract names. What is allowed are letters, numbers, underscores `_`, dots `.` and dashes `- `. 

To check the directory where the contract's files are located:

```
contract.path()
```

## Edit C++ code

Edit the `hello.world.cpp` file in *Visual Studio Code* and comment out line 17, i.e. `require_auth( user ) `:

```
#include <eosiolib/eosio.hpp>
#include <eosiolib/print.hpp>

#define DEBUG
#include "logger.hpp"
#include "hello.world88.hpp" 

using namespace eosio;

class hello : public eosio::contract {
  public:
      using contract::contract; 

      /// @abi action 
      void hi( account_name user ) {
        logger_info("user: ", name{user});
        //require_auth( user );
        print( "Hello, ", name{user} );
      }
};

EOSIO_ABI( hello, (hi) )
```


## Build the new contract

You can generate ABI and the web assembly code separately:

```
contract.abi()
```

```
contract.wast()
```

Or you can generate both at the same time:

```
contract.build()
```

**NOTE:** The `abi()`  and `build()` methods are relying on the *EOSIO* ABI compiler which has an experimental status in the *EOSIO* repository. Thus the ABI output might be different than expected. For the time being we recommend using the `wast()` method only and creating the ABI file manually.

## Deploy the Contract

Now we can deploy the compiled contract:

```
contract.deploy()
```

## Test the Contract

You can play with the contract giving it different arguments:

```
contract.push_action("hi", '{"user":"alice"}', sess.alice)
```

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

All the above variations should work, as the contract allows anyone to authorize it.

## Modify the code, re-compile & re-deploy

And now let's modify the `hi` method by uncommenting line 17, so that that contract authenticates the user before further execution:

```
void hi( account_name user ) {
	logger_info("user: ", name{user});
	require_auth( user );
	print( "Hello, ", name{user} );
}
```

Re-compile the contract:

```
contract.build()
```

And re-deploy the contract:

```
contract.deploy()
```

Now, if we attempt to mismatch the user and the authority, the contract will throw an error:

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

```
"error":{"code":3030001,"name":"tx_missing_auth","what":"missing required authority"...
```

But if we use the appropriate authority, there should no error:

```
contract.push_action("hi", '{"user":"carol"}', sess.carol)
```

And finally, when your are done your contract, you might want to delete it from your workspace:

```
contract.delete()
```

**NOTE:** The above command removes the entire folder.

## Exit Python CLI

To exit Python CLI:

```
exit()
```

Alternatively, use the `ctrl-D` shortcut.