# Compiling EOS Contracts using EOSFactory in *Visual Studio Code*

The purpose of this tutorial is to demonstrate how EOSFactory and its Python CLI combined with *Visual Studio Code* can be used to make compiling EOS contracts easy & intuitive. 

## Prerequisites

* This tutorial assumes that you have successfully installed EOSFactory. If it's not the case, please refer to [Installing EOSFactory](01.InstallingEOSFactory.html).
* We also assume that you are familiar with the material covered in [Interacting with EOS Contracts in EOSFactory](02.InteractingWithEOSContractsInEOSFactory.html).
* EOSFactory is fully compatible with [Visual Studio Code](https://code.visualstudio.com) which is a very convenient tool when working with smart-contract code. To install it please refer to [this webpage](https://code.visualstudio.com/download).
* Finally, we assume that you are familiar with the official [EOS Hello World tutorial](https://github.com/EOSIO/eos/wiki/Tutorial-Hello-World-Contract), as it presents the standard way to compile and deploy smart-contracts in EOS. What we present here is an alternative.

## Configure *Visual Studio Code* (VSC)

Start *Visual Studio Code* (VSC) and inside VSC open the `eosfactory` folder.

If you are on Windows, in order to get access to WSL bash terminal in VSC, navigate to `Preferences -> Settings` and overwrite the default configuration for the `terminal.integrated.shell.windows` option:

```
"terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe"
```

## Run Python CLI in VSC

In *Visual Studio Code*, switch to the bash terminal and type `python3` to run the Python CLI. The prompt should change to `>>>` signifying that it's ready for Python commands.

## Create a Contract Template

First, start the testnet and initialize the workspace:

```
import node
node.reset()
```

```
import sess
sess.init()
```

To create a new contract from a pre-defined template use the `Template` class:

```
from eosf import *
contract = Template("hello")
```

**NOTE:**  Do not use spaces in contract names. What is allowed are letters, numbers, underscores `_`, dots `.` and dashes `- `. 

To check the directory where the contract's files are located:

```
contract.path()
```

## Add C++ code

Edit the `hello.cpp` file in *Visual Studio Code* and add the following content to it:

```
#include <eosiolib/eosio.hpp>
#include <eosiolib/print.hpp>
using namespace eosio;

class hello : public eosio::contract {
  public:
      using contract::contract;

      /// @abi action 
      void hi( account_name user ) {
         print( "Hello, ", name{user} );
      }
};

EOSIO_ABI( hello, (hi) )
```

## Compile the Contract

You can generate ABI and the web assembly code separately:

```
contract.abi()
```

```
contract.wast()
```

Or you can generate both at the same time:

```
contract.build()
```

## Deploy the Contract

Now we can deploy the compiled contract:

```
contract.deploy()
```

## Test the Contract

You can play with the contract giving it different arguments:

```
contract.push_action("hi", '{"user":"alice"}', sess.alice)
```

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

All the above variations should work, as the contract allows anyone to authorize it.

## Modify the code, re-compile & re-deploy

And now let's modify the `hi` method to make it authenticate the user we are dealing with:

```
void hi( account_name user ) {
	require_auth( user );
	print( "Hello, ", name{user} );
}
```

Re-compile the contract:

```
contract.build()
```

The following step is optional, as you can re-deploy the contract on the existing testnet. However, if you want to reset the testnet, use these commands:

```
node.reset()
sess.init()
```

And re-deploy the contract:

```
contract.deploy()
```

Now, if we attempt to mismatch the user and the authority, the contract will throw an error:

```
contract.push_action("hi", '{"user":"carol"}', sess.alice)
```

```
"error":{"code":3030001,"name":"tx_missing_auth","what":"missing required authority"...
```

But if we use the appropriate authority, there should no error:

```
contract.push_action("hi", '{"user":"carol"}', sess.carol)
```

And finally, when your are done your contract, you might want to delete it from your workspace:

```
contract.delete()
```

**NOTE:** The above command removes the entire folder.

## Using *CMake* in *Visual Studio Code*

You can use *CMake* routines to build a contract, provided it has been created in EOSFactory from a template, e.g.

```
from eosf import *
contract = Template("hello")
```

The `Template` class produces a `CMakeLists` file in the contract's directory.  Here is an example of the output produced by *CMake* :

```
$ cmake ..
..................
..................
-- Configuring done
-- Generating done
-- Build files have been written to: /mnt/c/Workspaces/EOS/eosfactory/contracts/hello/build

$ make
[ 50%] Generating hello.abi
#              ABI: ../build/hello.abi
[ 50%] Built target abi
Scanning dependencies of target wast
[100%] Generating hello.wast
#             WAST: ../build/hello.wast
[100%] Built target wast
```

This way, if you open an individual contract folder (e.g. `tic.tac.toe` ) in *Visual Studio Code*, you'll be able to compile your contract using a prefabricated VSC task macro. To do it choose the `Run Build Task` option from the VSC menu, or just apply the `Crtl+Shift+B` shortcut.

Here is how the output of an automated build process might look like:

```
> Executing task: /mnt/d/Workspaces/EOS/eosfactory/teos/build/teos generate abi /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe;/mnt/d/Workspaces/EOS/eosfactory/teos/build/teos build contract /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe <

#              ABI: /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe/build/tic_tac_toe.abi
#             WAST: /mnt/d/Workspaces/EOS/eosfactory/contracts/tic.tac.toe/build/tic_tac_toe.wast

Terminal will be reused by tasks, press any key to close it.
```

## Using *IntelliSense* in *Visual Studio Code*

By opening an individual contract folder in VSC you'll also be able to make use of VSC [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense) feature. However for that to work you'll need to install the C/C++ IntelliSense extension in VSC.