# Unit-testing EOS Contracts using EOSFactory in *Visual Studio Code*

The purpose of this tutorial is to demonstrate how EOSFactory and its Python CLI can be used to make unit-testing EOS contracts easy & intuitive.

## Prerequisites

* This tutorial assumes that you have successfully installed EOSFactory. If it's not the case, please refer to [Installing EOSFactory](01.InstallingEOSFactory.html).
* We also assume that you are familiar with the material covered in [Interacting with EOS Contracts in EOSFactory](02.InteractingWithEOSContractsInEOSFactory.html).

## Create a unit-test

In *Visual Studio Code* create a new Python file containing your unit-test.

Here is the recommended structure:

```
import node
import sess
from eosf import *

def run():
    node.reset()
    sess.init()
    
    ############################
    # Your unit-test goes here #
    ############################
    
    print("Test OK")
    node.stop()
    
if __name__ == "__main__":
    run()
```

And below is an example of a unit-test for the `eosio.token` contract:

```
import node
import sess
from eosf import *

def run():
    node.reset()
    sess.init()

    c = Contract("eosio.token")
    c.deploy()

    c.push_action("create", '{"issuer":"eosio", "maximum_supply":"1000000000.0000 EOS", "can_freeze":0, "can_recall":0, "can_whitelist":0}')
    
    c.push_action("issue", '{"to":"alice", "quantity":"100.0000 EOS", "memo":"memo"}', sess.eosio)

    c.push_action("transfer", '{"from":"alice", "to":"carol", "quantity":"25.0000 EOS", "memo":"memo"}', sess.alice)
    
    c.push_action("transfer", '{"from":"carol", "to":"bob", "quantity":"13.0000 EOS", "memo":"memo"}', sess.carol)
    
    c.push_action("transfer", '{"from":"bob", "to":"alice", "quantity":"2.0000 EOS", "memo":"memo"}', sess.bob)

    t1=c.get_table("accounts", sess.alice)
    t2=c.get_table("accounts", sess.bob)
    t3=c.get_table("accounts", sess.carol)

    assert t1.json["rows"][0]["balance"] == '77.0000 EOS'
    assert t2.json["rows"][0]["balance"] == '11.0000 EOS'
    assert t3.json["rows"][0]["balance"] == '12.0000 EOS'

    print("Test OK")
    node.stop()
    
if __name__ == "__main__":
    run()
```

Assuming your unit-test file is named `test.py`, you can run it in a Python terminal:

```
import test
test.run()
```

Or you can do it directly in a bash terminal:

```
python3 ./tests/test.py
```

In our case the output looks like this:

```
#  nodeos exe file: /mnt/d/Workspaces/EOS/eos/build/programs/nodeos/nodeos
#  genesis state file: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir/genesis.json
#   server address: 127.0.0.1:8888
#  config directory: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir
#  wallet directory: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir/wallet
#  head block number: 0
#  head block time: 2017-12-04T01:00:00

#         password: PW5Jpe2U2D8HwXgZ89NrNYmZEzXiQY7KZa4hQ2FaKeqB7UyKzTggg

#   transaction id: c9dd03ad7329b989d808b0022a87a1281215406778599e82c7b80da978d9d2e3

#         key name: key_owner
#      private key: 5HzFMEvvxqDzFdTtDWLSk4h4wfLX242oefLWQiKtB4yCoibzrVN
#       public key: EOS6C4RpBVmXQV1jDU32chZSYdCCX7mShKLrWeU8yerSMWBYTDbGu

#         key name: key_active
#      private key: 5KiB6GeF68WfFwoSYcJSxsceRz6rkjUujJ9o8fSjxvNL7e6Mqpt
#       public key: EOS5fkdAoYvacFotu4pK2tQ4wHK3Fx2sAuPyzZfFS4yDNrY6iT7aD

#   transaction id: b9129c757cc7967f2c630df1de1b669fae6d63cd5174f09068880c39245d4ba9

#   transaction id: 5c818883604be2971fc44f89c30106818ab00957e38c21f16fb0a0d2ac0ad600

#   transaction id: eb15db310b3821a3f84ce39ef5f8d9dd046623b17d93e16b3d7d1d747879158f

#         key name: key_owner
#      private key: 5KAjZovyFjaPzSVLSpUAcHjJPtrCYgEG4c9L29rAv5pQnmkjGEA
#       public key: EOS64rdurm2WkRMeSZuTEVf1LAqcQ71azzkT24E29gfFjAPpUcjkQ

#         key name: key_active
#      private key: 5JBWhJbTS7YH7ESfDM3uQ6yKgm9WzP8L6utSFAnAWdVURECqmYA
#       public key: EOS8i9wu4SYhvA1SLAXMGchqXvPENnKLVPXM5BwWKHuZ7KARbAHTq

#   transaction id: 726e158f9688d0695644a1d48a0501209f6251a54bad12389cc4e473901fcb51

#   transaction id: 06147a1ab90ffde760ed76b9428ad85b14c7b7fd2b12525eb6f9dc23f79f82ec

#   transaction id: 18fc0413baf67b6209959de710030e81fd14e433fc5b505e685dabae154b66dc

#   transaction id: 314bd2df50fd46585797b4d7521a78a746cf5cb19388bbd7f6d535594e12d77b

#   transaction id: e2942f1bea72c2a69335dc96e54a9f7fb31ab146ab853b1369c41ecde8d2b7f3

#   transaction id: b1c8f14a2f1c897597f51f129d64804aeb301565dd89d1cf3655b678bbe9c0d3

#   transaction id: 3ede831bf1b7c05c8828f96f024862f13fdf943d9fb3ef28d76eb86eeacfaf77

#  {
#      "rows": [
#          {
#              "balance": "77.0000 EOS",
#              "frozen": "0",
#              "whitelist": "1"
#          }
#      ],
#      "more": "false"
#  }
#

#  {
#      "rows": [
#          {
#              "balance": "11.0000 EOS",
#              "frozen": "0",
#              "whitelist": "1"
#          }
#      ],
#      "more": "false"
#  }
#

#  {
#      "rows": [
#          {
#              "balance": "12.0000 EOS",
#              "frozen": "0",
#              "whitelist": "1"
#          }
#      ],
#      "more": "false"
#  }
#

Test OK
#  Daemon is stopped.
```
## The *Tic-Tac-Toe* game example

Here is a unit-test for the *Tic-Tac-Toe* contract:

```
import node
import sess
from eosf import *

def run():
    node.reset()
    sess.init()

    c = Contract("tic.tac.toe")
    c.deploy()

    c.push_action("create", '{"challenger":"alice", "host":"bob"}', sess.bob)

    t=c.get_table("games", sess.bob)
    
    assert t.json["rows"][0]["board"][0] == '0'
    assert t.json["rows"][0]["board"][1] == '0'
    assert t.json["rows"][0]["board"][2] == '0'
    assert t.json["rows"][0]["board"][3] == '0'
    assert t.json["rows"][0]["board"][4] == '0'
    assert t.json["rows"][0]["board"][5] == '0'
    assert t.json["rows"][0]["board"][6] == '0'
    assert t.json["rows"][0]["board"][7] == '0'
    assert t.json["rows"][0]["board"][8] == '0'

    c.push_action("move", '{"challenger":"alice", "host":"bob", "by":"bob", "mvt":{"row":0, "column":0} }', sess.bob)
    
    c.push_action("move", '{"challenger":"alice", "host":"bob", "by":"alice", "mvt":{"row":1, "column":1} }', sess.alice)

    t=c.get_table("games", sess.bob)

    assert t.json["rows"][0]["board"][0] == '1'
    assert t.json["rows"][0]["board"][1] == '0'
    assert t.json["rows"][0]["board"][2] == '0'
    assert t.json["rows"][0]["board"][3] == '0'
    assert t.json["rows"][0]["board"][4] == '2'
    assert t.json["rows"][0]["board"][5] == '0'
    assert t.json["rows"][0]["board"][6] == '0'
    assert t.json["rows"][0]["board"][7] == '0'
    assert t.json["rows"][0]["board"][8] == '0'

    c.push_action("restart", '{"challenger":"alice", "host":"bob", "by":"bob"}', sess.bob)
    
    t=c.get_table("games", sess.bob)
    
    assert t.json["rows"][0]["board"][0] == '0'
    assert t.json["rows"][0]["board"][1] == '0'
    assert t.json["rows"][0]["board"][2] == '0'
    assert t.json["rows"][0]["board"][3] == '0'
    assert t.json["rows"][0]["board"][4] == '0'
    assert t.json["rows"][0]["board"][5] == '0'
    assert t.json["rows"][0]["board"][6] == '0'
    assert t.json["rows"][0]["board"][7] == '0'
    assert t.json["rows"][0]["board"][8] == '0'

    c.push_action("close", '{"challenger":"alice", "host":"bob"}', sess.bob)

    print("Test OK")
    node.stop()

if __name__ == "__main__":
    run()
```

And here is the result:

```
#  nodeos exe file: /mnt/d/Workspaces/EOS/eos/build/programs/nodeos/nodeos
#  genesis state file: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir/genesis.json
#   server address: 127.0.0.1:8888
#  config directory: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir
#  wallet directory: /mnt/d/Workspaces/EOS/eosfactory/build/daemon/data-dir/wallet
#  head block number: 0
#  head block time: 2017-12-04T01:00:00

#         password: PW5HvML8Q8XbaBRmKCtPAVtfuZ5Ds7cqSozMAXYP5ugodzX69rpp8

#   transaction id: 68219709ccb1b8573ea8c990305d219eda8bf18482064b554857770e025c8193

#         key name: key_owner
#      private key: 5JjwZkiSh54PCUDeVrXHk4xJ4rTnBzBSt1gVWrfbUzAkGA5oUUM
#       public key: EOS6GcnkredTW19B4XYod42DBkVgiqLFxdEws5Zka4cUExUJz91od

#         key name: key_active
#      private key: 5JaqCGuLZ8KnCuMWjhXbmiemnXZJZp3Kofoj3v24PfTiHQcN8YB
#       public key: EOS8h2Rop1aXsem5qRVXVWascrFL6mCMBmWjfBmREuV4AZvvqczqw

#   transaction id: a10d62a9f1e8bcd634319f959dcc55e98060a3b59420712bf7bf3474a329e5d1

#   transaction id: 38d3d9a0d745e03c1fc622e471e8860f86805a81dadafcddbdae1665ba1167ed

#   transaction id: 199691aaadc569f3454d52fe7debfca1ec288ffc9030e454ce80d64d243c3085

#     account name: tic.tac.toe

#         key name: key_owner
#      private key: 5KAobgMVHfXiCaSpFzNBcU79Rn1CrDPpL8r9pRPKEkUjTEM2QVY
#       public key: EOS8iBzdpLwbdtA6985FZcuq3VKwqXmZjC7TLYH99JrnnwoPn9mjW

#         key name: key_active
#      private key: 5J7DfiTNzoBU8stH5GqpDVSmQqMRH7LpPXutG73G7g6YPCAUA6D
#       public key: EOS5LjLLUks8YDxTjRpvGyZE6i8kJmoSnZ7LENupey7Zvag1i7g5X

#   transaction id: e9b846d165058c77629c309683ab7769d43b6d76a6b19f54d79d0e0b5d134ada

#   transaction id: edc826c83dd6f3a243a1dbbe15bd6b7d8610b35845ecd7fbdb4483835024fdba

#   transaction id: b3fd3e72a6bff72ff97a4074356416c0f7356fa45ba654055c9adbbea94cc70f

#  {
#      "rows": [
#          {
#              "challenger": "alice",
#              "host": "bob",
#              "turn": "bob",
#              "winner": "none",
#              "board": [
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0"
#              ]
#          }
#      ],
#      "more": "false"
#  }
#

#   transaction id: 421c39c68119fabce9065c904f78500fcf6a1424c049bb9875774b6919f7e2ed

#   transaction id: 33aebdf5acd10a947006b4510b0ddd6eaeffec14850840852948ac5ab4ac5f64

#  {
#      "rows": [
#          {
#              "challenger": "alice",
#              "host": "bob",
#              "turn": "bob",
#              "winner": "none",
#              "board": [
#                  "1",
#                  "0",
#                  "0",
#                  "0",
#                  "2",
#                  "0",
#                  "0",
#                  "0",
#                  "0"
#              ]
#          }
#      ],
#      "more": "false"
#  }
#

#   transaction id: 2a1bb4049b12cb18408e8bed2bb8c7b78b64638c6d50d743e22f29ed4c33c799

#  {
#      "rows": [
#          {
#              "challenger": "alice",
#              "host": "bob",
#              "turn": "bob",
#              "winner": "none",
#              "board": [
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0",
#                  "0"
#              ]
#          }
#      ],
#      "more": "false"
#  }
#

#   transaction id: eadeaf5438107333a30f7122a3377b3fbe95eaedb0618f2a78a09975568383e1

Test OK
#  Daemon is stopped.
```

## Further steps

The above schema is just a proof-of-concept solution for unit-testing in EOSFactory. Ultimately we want to make unit-testing much better organized and integrated more tightly with *Visual Studio Code*.